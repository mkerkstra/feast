# Default values for feast-operator.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []

# Operator deployment configuration
operator:
  # Image configuration
  image:
    repository: quay.io/feastdev/feast-operator
    tag: 0.52.0
    pullPolicy: IfNotPresent
  
  # Replica count
  replicaCount: 1
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi
  
  # Environment variables
  env:
    relatedImageFeatureServer: "quay.io/feastdev/feature-server:0.52.0"
    relatedImageCronJob: "quay.io/openshift/origin-cli:4.17"
  
  # Health check configuration
  healthcheck:
    port: 8081
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 20
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
  
  # Pod security context
  securityContext:
    runAsNonRoot: true
    # seccompProfile:
    #   type: RuntimeDefault
  
  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - "ALL"
  
  # Node affinity
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #         - key: kubernetes.io/arch
    #           operator: In
    #           values:
    #             - amd64
    #             - arm64
    #             - ppc64le
    #             - s390x
    #         - key: kubernetes.io/os
    #           operator: In
    #           values:
    #             - linux
  
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Pod annotations
  podAnnotations:
    kubectl.kubernetes.io/default-container: manager
  
  # Pod labels
  podLabels: {}
  
  # Additional arguments (beyond the auto-generated ones)
  args: []

# Service account configuration
serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true

# Metrics service configuration
metrics:
  # Enable metrics service
  enabled: true
  # Service configuration
  service:
    type: ClusterIP
    port: 8443
    targetPort: 8443
    annotations: {}

# Namespace configuration
namespace:
  # Create namespace if it doesn't exist
  create: true
  # Namespace name (defaults to Release.Namespace)
  name: ""
  # Namespace labels
  labels:
    control-plane: controller-manager

# CRD configuration
crds:
  # Install CRDs
  install: true

# Additional labels to add to all resources
commonLabels: {}

# Additional annotations to add to all resources
commonAnnotations: {}

# Default storage configuration for PVCs
storage:
  # Default storage class for all PVCs (can be overridden per service)
  defaultStorageClass: ""
  # Default access modes
  defaultAccessModes:
    - ReadWriteOnce
  # Default reclaim policy annotation
  reclaimPolicy: ""

# Name prefix for all resources (matches kustomize namePrefix)
namePrefix: "feast-operator-"

# Enable Prometheus monitoring
prometheus:
  # Install ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: false
    # Additional labels for ServiceMonitor
    labels: {}
    # Scrape interval
    interval: 30s
    # Scrape timeout
    timeout: 10s

# Advanced configuration options
advanced:
  # Enable leader election (should always be true for production)
  leaderElection: true
  # Metrics bind address (HTTPS)
  metricsBindAddress: ":8443"
  # Health probe bind address
  healthProbeBindAddress: ":8081"
  # Termination grace period in seconds
  terminationGracePeriodSeconds: 10

# Example FeatureStore deployment (optional)
# Deploys a basic FeatureStore CR for quick start
featureStore:
  # Enable deployment of example FeatureStore
  enabled: false
  # FeatureStore configuration
  name: "sample"
  feastProject: "my_project"
  
  # Feast project directory configuration
  feastProjectDir:
    # Git clone configuration
    git:
      enabled: false
      url: ""
      ref: ""
      featureRepoPath: "feature_repo"
      configs: {}
      env: []
      envFrom: []
    # Init configuration
    init:
      enabled: false
      minimal: true
      # local, gcp, aws, snowflake, spark, postgres, hbase, cassandra, hazelcast, ikv, couchbase, clickhouse
      template: "local"
  
  # Services configuration
  services:
    # Online Store configuration
    onlineStore:
      enabled: true
      server:
        enabled: false
        tls:
          disable: false
        env: []
        envFrom: []
        volumeMounts: []
      persistence:
        # File-based persistence
        file:
          enabled: false
          path: "online_store.db"
          pvc:
            ref:
              name: ""
            mountPath: "/data/online"
            create:
              enabled: false
              storageClassName: ""  # Uses storage.defaultStorageClass if empty
              accessModes: []  # Uses storage.defaultAccessModes if empty
              resources:
                requests:
                  storage: "5Gi"
              # Optional annotations for storage behavior
              annotations: {}
        # Store-based persistence (Redis, DynamoDB, etc)
        store:
          enabled: false
          # redis, dynamodb, postgres, bigtable, cassandra, etc
          type: ""
          secretRef:
            name: ""
            # Key in secret containing store config (e.g., 'redis', 'postgres', 'dynamodb')
            # If empty, defaults to the store type
            key: ""
    
    # Offline Store configuration  
    offlineStore:
      enabled: false
      server:
        enabled: false
        tls:
          disable: false
        env: []
        envFrom: []
        volumeMounts: []
      persistence:
        file:
          enabled: false
          # duckdb, parquet
          type: "duckdb"
          pvc:
            mountPath: "/data/offline"
            create:
              enabled: false
              storageClassName: ""  # Uses storage.defaultStorageClass if empty
              accessModes: []  # Uses storage.defaultAccessModes if empty
              resources:
                requests:
                  storage: "10Gi"
              annotations: {}
        store:
          enabled: false
          # bigquery, snowflake, redshift, spark, postgres, trino, etc
          type: ""
          secretRef:
            name: ""
            # Key in secret containing store config (e.g., 'bigquery', 'snowflake', 'postgres')
            # If empty, defaults to the store type
            key: ""
    
    # Registry configuration
    registry:
      # Local registry
      local:
        enabled: true
        server:
          enabled: false
          tls:
            disable: false
        persistence:
          file:
            enabled: true
            path: "registry.db"
            # File path for cloud storage (gs://, s3://, etc)
            cloudPath: ""
            pvc:
              mountPath: "/data/registry"
              create:
                enabled: false
                storageClassName: ""  # Uses storage.defaultStorageClass if empty
                accessModes: []  # Uses storage.defaultAccessModes if empty
                resources:
                  requests:
                    storage: "1Gi"
                annotations: {}
          store:
            enabled: false
            # sql, snowflake
            type: ""
            secretRef:
              name: ""
              # Key in secret containing registry config (e.g., 'sql', 'snowflake')
              # If empty, defaults to the store type
              key: ""
      # Remote registry reference
      remote:
        enabled: false
        # Reference to another FeatureStore in same cluster
        feastRef:
          name: ""
          namespace: ""
        # Or HTTP(S) endpoint
        endpoint: ""
    
    # Feast UI
    ui:
      enabled: false
    
    # Transform engine / compute engine
    computeEngine:
      enabled: false
      # local, spark, lambda, ray, snowflake
      type: "local"
      config: {}
  
  # Authorization configuration
  authz:
    # Kubernetes RBAC
    kubernetes:
      enabled: false
      secretRef:
        name: ""
    # OIDC authentication
    oidc:
      enabled: false
      secretRef:
        name: ""
  
  # CronJob configuration for materialization
  cronJob:
    enabled: false
    schedule: "0 */6 * * *"
    timeZone: ""
    startingDeadlineSeconds: 600
    concurrencyPolicy: "Forbid"
    suspend: false
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1
    jobSpec:
      parallelism: 1
      completions: 1
      activeDeadlineSeconds: 3600
      backoffLimit: 3
    containerConfigs:
      env: []
      resources: {}
  
  # Volumes and volume mounts
  volumes: []
  
  # Additional configuration
  config:
    # Custom feast configuration (raw YAML)
    custom: {}
  
  # Quick start templates for common scenarios
  quickStart:
    # Deploy with persistent volumes
    withPersistence: false
    # Deploy with external database  
    withDatabase: false
    # Deploy with TLS disabled (development only)
    disableTLS: false
    # Template-based deployment
    template:
      enabled: false
      # local, gcp, aws, snowflake, spark, postgres
      type: "local"
