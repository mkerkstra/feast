{{- if .Values.featureStores.enabled }}
{{- range $name, $config := .Values.featureStores }}
{{- if and (ne $name "enabled") $config.enabled }}
---
apiVersion: feast.dev/v1alpha1
kind: FeatureStore
metadata:
  name: {{ $name }}
  namespace: {{ include "feast-operator.namespace" $ }}
  labels:
    {{- include "feast-operator.labels" $ | nindent 4 }}
    feast.dev/featurestore: {{ $name | quote }}
  {{- with (include "feast-operator.annotations" $) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  feastProject: {{ $config.feastProject }}
  {{- /* Safeguards for optional blocks */}}
  {{- $qsDisable := and $config.quickStart $config.quickStart.disableTLS }}
  
  {{- $fpd := $config.feastProjectDir | default dict }}
  {{- if or (and $fpd.git $fpd.git.enabled) (and $fpd.init $fpd.init.enabled) }}
  feastProjectDir:
    {{- if and $fpd.git $fpd.git.enabled }}
    git:
      url: {{ $fpd.git.url | quote }}
      {{- with $fpd.git.ref }}
      ref: {{ . | quote }}
      {{- end }}
      {{- with $fpd.git.featureRepoPath }}
      featureRepoPath: {{ . | quote }}
      {{- end }}
      {{- with $fpd.git.configs }}
      configs:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $fpd.git.env }}
      env:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $fpd.git.envFrom }}
      envFrom:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- else if and $fpd.init $fpd.init.enabled }}
    init:
      minimal: {{ $fpd.init.minimal }}
      {{- with $fpd.init.template }}
      template: {{ . | quote }}
      {{- end }}
    {{- end }}
  {{- end }}
  
  {{- if or (and $config.services $config.services.onlineStore $config.services.onlineStore.enabled)
            (and $config.services $config.services.offlineStore $config.services.offlineStore.enabled)
            (and $config.services $config.services.registry $config.services.registry.local $config.services.registry.local.enabled)
            (and $config.services $config.services.registry $config.services.registry.remote $config.services.registry.remote.enabled)
            (and $config.services $config.services.ui $config.services.ui.enabled)
            (and $config.services $config.services.computeEngine $config.services.computeEngine.enabled) }}
  services:
    {{- if and $config.services.onlineStore $config.services.onlineStore.enabled }}
    onlineStore:
      {{- if or (and $config.services.onlineStore.server $config.services.onlineStore.server.enabled) $qsDisable (and $.Values.tls.enabled (and $config.tls $config.tls.enabled)) }}
      server:
        {{- $tlsEnabled := and $.Values.tls.enabled (or (and $config.tls $config.tls.enabled) (not $qsDisable)) }}
        {{- if or $qsDisable (and $config.services.onlineStore.server.tls $config.services.onlineStore.server.tls.disable) (not $tlsEnabled) }}
        tls:
          disable: true
        {{- else if $tlsEnabled }}
        tls:
          # TLS configuration for online store
          certPath: "/etc/certs/tls.crt"
          keyPath: "/etc/certs/tls.key"
        {{- end }}
        {{- with $config.services.onlineStore.server.env }}
        env:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with $config.services.onlineStore.server.envFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
          {{- if $tlsEnabled }}
          - name: onlinestore-tls
            mountPath: "/etc/certs"
            readOnly: true
          {{- end }}
          {{- with $config.services.onlineStore.server.volumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- end }}
      {{- if or $config.services.onlineStore.persistence.file.enabled $config.services.onlineStore.persistence.store.enabled $config.quickStart.withPersistence }}
      persistence:
        {{- if or $config.services.onlineStore.persistence.file.enabled $config.quickStart.withPersistence }}
        file:
          path: {{ $config.services.onlineStore.persistence.file.path | default "online_store.db" | quote }}
          {{- if or $config.services.onlineStore.persistence.file.pvc.create.enabled $config.quickStart.withPersistence }}
          pvc:
            {{- if $config.services.onlineStore.persistence.file.pvc.ref.name }}
            ref:
              name: {{ $config.services.onlineStore.persistence.file.pvc.ref.name | quote }}
            {{- else }}
            create:
              {{- $storageClass := $config.services.onlineStore.persistence.file.pvc.create.storageClassName | default $.Values.storage.defaultStorageClass }}
              {{- if $storageClass }}
              storageClassName: {{ $storageClass | quote }}
              {{- end }}
              {{- $accessModes := $config.services.onlineStore.persistence.file.pvc.create.accessModes | default $.Values.storage.defaultAccessModes }}
              {{- if $accessModes }}
              accessModes:
                {{- toYaml $accessModes | nindent 16 }}
              {{- end }}
              resources:
                requests:
                  storage: {{ $config.services.onlineStore.persistence.file.pvc.create.resources.requests.storage | default "5Gi" | quote }}
              {{- with $config.services.onlineStore.persistence.file.pvc.create.annotations }}
              annotations:
                {{- toYaml . | nindent 16 }}
              {{- end }}
            {{- end }}
            mountPath: {{ $config.services.onlineStore.persistence.file.pvc.mountPath | default "/data/online" | quote }}
          {{- end }}
        {{- else if $config.services.onlineStore.persistence.store.enabled }}
        store:
          type: {{ $config.services.onlineStore.persistence.store.type | quote }}
          secretRef:
            name: {{ $config.services.onlineStore.persistence.store.secretRef.name | quote }}
            {{- $secretKey := $config.services.onlineStore.persistence.store.secretRef.key | default $config.services.onlineStore.persistence.store.type }}
            {{- if $secretKey }}
            key: {{ $secretKey | quote }}
            {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
    
    {{- if and $config.services.offlineStore $config.services.offlineStore.enabled }}
    offlineStore:
      {{- if or (and $config.services.offlineStore.server $config.services.offlineStore.server.enabled) $qsDisable (and $.Values.tls.enabled (and $config.tls $config.tls.enabled)) }}
      server:
        {{- $tlsEnabled := and $.Values.tls.enabled (or (and $config.tls $config.tls.enabled) (not $qsDisable)) }}
        {{- if or $qsDisable (and $config.services.offlineStore.server.tls $config.services.offlineStore.server.tls.disable) (not $tlsEnabled) }}
        tls:
          disable: true
        {{- else if $tlsEnabled }}
        tls:
          # TLS configuration for offline store
          certPath: "/etc/certs/tls.crt"
          keyPath: "/etc/certs/tls.key"
        {{- end }}
        {{- with $config.services.offlineStore.server.env }}
        env:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with $config.services.offlineStore.server.envFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
          {{- if $tlsEnabled }}
          - name: offlinestore-tls
            mountPath: "/etc/certs"
            readOnly: true
          {{- end }}
          {{- with $config.services.offlineStore.server.volumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- end }}
      {{- if or $config.services.offlineStore.persistence.file.enabled $config.services.offlineStore.persistence.store.enabled $config.quickStart.withPersistence }}
      persistence:
        {{- if or $config.services.offlineStore.persistence.file.enabled $config.quickStart.withPersistence }}
        file:
          type: {{ $config.services.offlineStore.persistence.file.type | default "duckdb" | quote }}
          {{- if $config.services.offlineStore.persistence.file.pvc.create.enabled }}
          pvc:
            create:
              {{- $storageClass := $config.services.offlineStore.persistence.file.pvc.create.storageClassName | default $.Values.storage.defaultStorageClass }}
              {{- if $storageClass }}
              storageClassName: {{ $storageClass | quote }}
              {{- end }}
              {{- $accessModes := $config.services.offlineStore.persistence.file.pvc.create.accessModes | default $.Values.storage.defaultAccessModes }}
              {{- if $accessModes }}
              accessModes:
                {{- toYaml $accessModes | nindent 16 }}
              {{- end }}
              resources:
                requests:
                  storage: {{ $config.services.offlineStore.persistence.file.pvc.create.resources.requests.storage | default "10Gi" | quote }}
              {{- with $config.services.offlineStore.persistence.file.pvc.create.annotations }}
              annotations:
                {{- toYaml . | nindent 16 }}
              {{- end }}
            mountPath: {{ $config.services.offlineStore.persistence.file.pvc.mountPath | default "/data/offline" | quote }}
          {{- end }}
        {{- else if $config.services.offlineStore.persistence.store.enabled }}
        store:
          type: {{ $config.services.offlineStore.persistence.store.type | quote }}
          secretRef:
            name: {{ $config.services.offlineStore.persistence.store.secretRef.name | quote }}
            {{- $secretKey := $config.services.offlineStore.persistence.store.secretRef.key | default $config.services.offlineStore.persistence.store.type }}
            {{- if $secretKey }}
            key: {{ $secretKey | quote }}
            {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
    
    {{- if and $config.services.registry $config.services.registry.local $config.services.registry.local.enabled }}
    registry:
      local:
        {{- if or (and $config.services.registry.local.server $config.services.registry.local.server.enabled) $qsDisable }}
        server:
          {{- if or $qsDisable (and $config.services.registry.local.server.tls $config.services.registry.local.server.tls.disable) }}
          tls:
            disable: true
          {{- end }}
        {{- end }}
        {{- if or $config.services.registry.local.persistence.file.enabled $config.services.registry.local.persistence.store.enabled $config.quickStart.withPersistence }}
        persistence:
          {{- if or $config.services.registry.local.persistence.file.enabled $config.quickStart.withPersistence }}
          file:
            {{- if $config.services.registry.local.persistence.file.cloudPath }}
            path: {{ $config.services.registry.local.persistence.file.cloudPath | quote }}
            {{- else }}
            path: {{ $config.services.registry.local.persistence.file.path | default "registry.db" | quote }}
            {{- if $config.services.registry.local.persistence.file.pvc.create.enabled }}
            pvc:
              create:
                {{- $storageClass := $config.services.registry.local.persistence.file.pvc.create.storageClassName | default $.Values.storage.defaultStorageClass }}
                {{- if $storageClass }}
                storageClassName: {{ $storageClass | quote }}
                {{- end }}
                {{- $accessModes := $config.services.registry.local.persistence.file.pvc.create.accessModes | default $.Values.storage.defaultAccessModes }}
                {{- if $accessModes }}
                accessModes:
                  {{- toYaml $accessModes | nindent 18 }}
                {{- end }}
                resources:
                  requests:
                    storage: {{ $config.services.registry.local.persistence.file.pvc.create.resources.requests.storage | default "1Gi" | quote }}
                {{- with $config.services.registry.local.persistence.file.pvc.create.annotations }}
                annotations:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
              mountPath: {{ $config.services.registry.local.persistence.file.pvc.mountPath | default "/data/registry" | quote }}
            {{- end }}
            {{- end }}
          {{- else if $config.services.registry.local.persistence.store.enabled }}
          store:
            type: {{ $config.services.registry.local.persistence.store.type | quote }}
            secretRef:
              name: {{ $config.services.registry.local.persistence.store.secretRef.name | quote }}
              {{- $secretKey := $config.services.registry.local.persistence.store.secretRef.key | default $config.services.registry.local.persistence.store.type }}
              {{- if $secretKey }}
              key: {{ $secretKey | quote }}
              {{- end }}
          {{- end }}
        {{- end }}
    {{- else if and $config.services.registry.remote $config.services.registry.remote.enabled }}
    registry:
      remote:
        {{- if $config.services.registry.remote.feastRef.name }}
        feastRef:
          name: {{ $config.services.registry.remote.feastRef.name | quote }}
          {{- with $config.services.registry.remote.feastRef.namespace }}
          namespace: {{ . | quote }}
          {{- end }}
        {{- else if $config.services.registry.remote.endpoint }}
        endpoint: {{ $config.services.registry.remote.endpoint | quote }}
        {{- end }}
    {{- end }}
    
    {{- if and $config.services.ui $config.services.ui.enabled }}
    ui: {}
    {{- end }}
    
    {{- if and $config.services.computeEngine $config.services.computeEngine.enabled }}
    computeEngine:
      type: {{ $config.services.computeEngine.type | default "local" | quote }}
      {{- with $config.services.computeEngine.config }}
      config:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    
    {{- $tlsEnabled := and $.Values.tls.enabled (or (and $config.tls $config.tls.enabled) (not $qsDisable)) }}
    {{- $hasVolumes := or $config.volumes $tlsEnabled }}
    {{- if $hasVolumes }}
    volumes:
      {{- if $tlsEnabled }}
      {{- if and $config.services.onlineStore $config.services.onlineStore.enabled }}
      - name: onlinestore-tls
        secret:
          secretName: {{ $config.tls.services.onlineStore.secretName | default ($config.tls.existingSecret | default (printf "%s-onlinestore-tls" $name)) }}
      {{- end }}
      {{- if and $config.services.offlineStore $config.services.offlineStore.enabled }}
      - name: offlinestore-tls
        secret:
          secretName: {{ $config.tls.services.offlineStore.secretName | default ($config.tls.existingSecret | default (printf "%s-offlinestore-tls" $name)) }}
      {{- end }}
      {{- if or (and $config.services.registry $config.services.registry.local $config.services.registry.local.enabled) (and $config.services.registry $config.services.registry.remote $config.services.registry.remote.enabled) }}
      - name: registry-tls
        secret:
          secretName: {{ $config.tls.services.registry.secretName | default ($config.tls.existingSecret | default (printf "%s-registry-tls" $name)) }}
      {{- end }}
      {{- if and $config.services.ui $config.services.ui.enabled }}
      - name: ui-tls
        secret:
          secretName: {{ $config.tls.services.ui.secretName | default ($config.tls.existingSecret | default (printf "%s-ui-tls" $name)) }}
      {{- end }}
      {{- end }}
      {{- with $config.volumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- end }}
  {{- end }}
  
  {{- if or $config.authz.kubernetes.enabled $config.authz.oidc.enabled }}
  authz:
    {{- if $config.authz.kubernetes.enabled }}
    kubernetes:
      secretRef:
        name: {{ $config.authz.kubernetes.secretRef.name | quote }}
    {{- else if $config.authz.oidc.enabled }}
    oidc:
      secretRef:
        name: {{ $config.authz.oidc.secretRef.name | quote }}
    {{- end }}
  {{- end }}
  
  {{- if $config.cronJob.enabled }}
  cronJob:
    schedule: {{ $config.cronJob.schedule | default "0 */6 * * *" | quote }}
    {{- with $config.cronJob.timeZone }}
    timeZone: {{ . | quote }}
    {{- end }}
    {{- with $config.cronJob.startingDeadlineSeconds }}
    startingDeadlineSeconds: {{ . }}
    {{- end }}
    concurrencyPolicy: {{ $config.cronJob.concurrencyPolicy | default "Forbid" | quote }}
    suspend: {{ $config.cronJob.suspend | default false }}
    successfulJobsHistoryLimit: {{ $config.cronJob.successfulJobsHistoryLimit | default 3 }}
    failedJobsHistoryLimit: {{ $config.cronJob.failedJobsHistoryLimit | default 1 }}
    jobSpec:
      parallelism: {{ $config.cronJob.jobSpec.parallelism | default 1 }}
      completions: {{ $config.cronJob.jobSpec.completions | default 1 }}
      activeDeadlineSeconds: {{ $config.cronJob.jobSpec.activeDeadlineSeconds | default 3600 }}
      backoffLimit: {{ $config.cronJob.jobSpec.backoffLimit | default 3 }}
    {{- with $config.cronJob.containerConfigs }}
    containerConfigs:
      {{- with .env }}
      env:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .resources }}
      resources:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
  {{- end }}
  
  {{- with $config.config.custom }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}
